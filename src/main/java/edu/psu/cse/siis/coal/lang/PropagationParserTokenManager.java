/* Generated By:JavaCC: Do not edit this line. PropagationParserTokenManager.java */
package edu.psu.cse.siis.coal.lang;
import java.io.IOException;

/** Token Manager. */
class PropagationParserTokenManager implements edu.psu.cse.siis.coal.lang.PropagationParserConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x67f0f80L) != 0L)
         {
            jjmatchedKind = 30;
            return 96;
         }
         if ((active0 & 0x400000c000L) != 0L)
            return 50;
         return -1;
      case 1:
         if ((active0 & 0x67f0f80L) != 0L)
         {
            jjmatchedKind = 30;
            jjmatchedPos = 1;
            return 97;
         }
         if ((active0 & 0xc000L) != 0L)
            return 98;
         return -1;
      case 2:
         if ((active0 & 0xc000L) != 0L)
            return 99;
         if ((active0 & 0x66f0e80L) != 0L)
         {
            jjmatchedKind = 30;
            jjmatchedPos = 2;
            return 97;
         }
         if ((active0 & 0x100100L) != 0L)
            return 97;
         return -1;
      case 3:
         if ((active0 & 0xc000L) != 0L)
            return 99;
         if ((active0 & 0x2000a00L) != 0L)
            return 97;
         if ((active0 & 0x46f0480L) != 0L)
         {
            jjmatchedKind = 30;
            jjmatchedPos = 3;
            return 97;
         }
         return -1;
      case 4:
         if ((active0 & 0xc000L) != 0L)
            return 99;
         if ((active0 & 0x6c0400L) != 0L)
         {
            jjmatchedKind = 30;
            jjmatchedPos = 4;
            return 97;
         }
         if ((active0 & 0x4030080L) != 0L)
            return 97;
         return -1;
      case 5:
         if ((active0 & 0x8000L) != 0L)
            return 99;
         if ((active0 & 0x480400L) != 0L)
         {
            jjmatchedKind = 30;
            jjmatchedPos = 5;
            return 97;
         }
         if ((active0 & 0x240000L) != 0L)
            return 97;
         return -1;
      case 6:
         if ((active0 & 0x8000L) != 0L)
            return 99;
         if ((active0 & 0x80000L) != 0L)
            return 97;
         if ((active0 & 0x400400L) != 0L)
         {
            jjmatchedKind = 30;
            jjmatchedPos = 6;
            return 97;
         }
         return -1;
      case 7:
         if ((active0 & 0x400000L) != 0L)
         {
            jjmatchedKind = 30;
            jjmatchedPos = 7;
            return 97;
         }
         if ((active0 & 0x400L) != 0L)
            return 97;
         return -1;
      case 8:
         if ((active0 & 0x400000L) != 0L)
         {
            jjmatchedKind = 30;
            jjmatchedPos = 8;
            return 97;
         }
         return -1;
      case 9:
         if ((active0 & 0x400000L) != 0L)
         {
            jjmatchedKind = 30;
            jjmatchedPos = 9;
            return 97;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 13:
         jjmatchedKind = 4;
         return jjMoveStringLiteralDfa1_0(0x20L);
      case 40:
         return jjStopAtPos(0, 42);
      case 41:
         return jjStopAtPos(0, 43);
      case 44:
         return jjStopAtPos(0, 41);
      case 58:
         return jjStopAtPos(0, 23);
      case 59:
         return jjStopAtPos(0, 40);
      case 60:
         jjmatchedKind = 38;
         return jjMoveStringLiteralDfa1_0(0xc000L);
      case 61:
         return jjStopAtPos(0, 24);
      case 62:
         return jjStopAtPos(0, 39);
      case 91:
         return jjStopAtPos(0, 12);
      case 93:
         return jjStopAtPos(0, 13);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x400L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x4000880L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x80000L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x100000L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x40000L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x100L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x2000000L);
      case 113:
         return jjMoveStringLiteralDfa1_0(0x10000L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x620000L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x200L);
      case 123:
         return jjStopAtPos(0, 36);
      case 125:
         return jjStopAtPos(0, 37);
      default :
         return jjMoveNfa_0(6, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 10:
         if ((active0 & 0x20L) != 0L)
            return jjStopAtPos(1, 5);
         break;
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x80L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x4200900L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000400L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x30000L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x200L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x400080L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000L);
      case 100:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(2, 8, 97);
         break;
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000L);
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0x400L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x48000L);
      case 110:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(2, 20, 97);
         return jjMoveStringLiteralDfa3_0(active0, 0x4000L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x20a00L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x4200000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(3, 9, 97);
         return jjMoveStringLiteralDfa4_0(active0, 0x20000L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x4c000L);
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000L);
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000L);
      case 112:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(3, 25, 97);
         break;
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x210000L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x80L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x400L);
      case 121:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(3, 11, 97);
         break;
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0);
   try { curChar = input_stream.readChar(); }
   catch(IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000L);
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0x400L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x48000L);
      case 114:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(4, 17, 97);
         break;
      case 115:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(4, 7, 97);
         break;
      case 116:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(4, 26, 97);
         return jjMoveStringLiteralDfa5_0(active0, 0x4000L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000L);
      case 121:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(4, 16, 97);
         break;
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0);
   try { curChar = input_stream.readChar(); }
   catch(IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x4000L) != 0L)
            return jjStopAtPos(5, 14);
         break;
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0x400000L);
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x80000L);
      case 101:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(5, 18, 97);
         else if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(5, 21, 97);
         return jjMoveStringLiteralDfa6_0(active0, 0x400L);
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0);
   try { curChar = input_stream.readChar(); }
   catch(IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(6, 19, 97);
         break;
      case 102:
         return jjMoveStringLiteralDfa7_0(active0, 0x400000L);
      case 110:
         return jjMoveStringLiteralDfa7_0(active0, 0x400L);
      case 116:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0);
   try { curChar = input_stream.readChar(); }
   catch(IOException e) {
      jjStopStringLiteralDfa_0(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x8000L) != 0L)
            return jjStopAtPos(7, 15);
         break;
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x400000L);
      case 116:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(7, 10, 97);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0);
   try { curChar = input_stream.readChar(); }
   catch(IOException e) {
      jjStopStringLiteralDfa_0(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa9_0(active0, 0x400000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0);
   try { curChar = input_stream.readChar(); }
   catch(IOException e) {
      jjStopStringLiteralDfa_0(8, active0);
      return 9;
   }
   switch(curChar)
   {
      case 108:
         return jjMoveStringLiteralDfa10_0(active0, 0x400000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0);
   try { curChar = input_stream.readChar(); }
   catch(IOException e) {
      jjStopStringLiteralDfa_0(9, active0);
      return 10;
   }
   switch(curChar)
   {
      case 100:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(10, 22, 97);
         break;
      default :
         break;
   }
   return jjStartNfa_0(9, active0);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 96;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 99:
                  if ((0x3ff401000000000L & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  else if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 86;
                  if ((0x3ff401000000000L & l) != 0L)
                     jjCheckNAddStates(3, 5);
                  else if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 54;
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(6, 9);
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(10, 13);
                  break;
               case 97:
                  if ((0x3ff401000000000L & l) != 0L)
                  {
                     if (kind > 31)
                        kind = 31;
                     jjCheckNAddTwoStates(46, 47);
                  }
                  else if (curChar == 32)
                     jjCheckNAddTwoStates(25, 33);
                  if ((0x3ff401000000000L & l) != 0L)
                     jjCheckNAddStates(14, 16);
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 31)
                        kind = 31;
                     jjCheckNAddStates(17, 19);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 30)
                        kind = 30;
                     jjCheckNAdd(45);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(20, 23);
                  break;
               case 98:
                  if ((0x3ff401000000000L & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  else if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 86;
                  if ((0x3ff401000000000L & l) != 0L)
                     jjCheckNAddStates(3, 5);
                  else if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 54;
                  break;
               case 96:
                  if ((0x3ff401000000000L & l) != 0L)
                  {
                     if (kind > 31)
                        kind = 31;
                     jjCheckNAddTwoStates(46, 47);
                  }
                  else if (curChar == 32)
                     jjCheckNAddTwoStates(25, 33);
                  if ((0x3ff401000000000L & l) != 0L)
                     jjCheckNAddStates(14, 16);
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 30)
                        kind = 30;
                     jjCheckNAdd(45);
                  }
                  break;
               case 6:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 27)
                        kind = 27;
                     jjCheckNAdd(8);
                  }
                  else if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(8);
                  else if (curChar == 60)
                     jjAddStates(24, 25);
                  else if (curChar == 34)
                     jjCheckNAddStates(26, 28);
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 0:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(1, 2);
                  break;
               case 1:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(1, 2);
                  break;
               case 2:
                  if (curChar == 42)
                     jjCheckNAddStates(29, 31);
                  break;
               case 3:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(4, 2);
                  break;
               case 4:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(4, 2);
                  break;
               case 5:
                  if (curChar == 47 && kind > 6)
                     kind = 6;
                  break;
               case 7:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(8);
                  break;
               case 8:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 27)
                     kind = 27;
                  jjCheckNAdd(8);
                  break;
               case 9:
                  if (curChar == 34)
                     jjCheckNAddStates(26, 28);
                  break;
               case 10:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(26, 28);
                  break;
               case 12:
                  if ((0x8400002400L & l) != 0L)
                     jjCheckNAddStates(26, 28);
                  break;
               case 13:
                  if (curChar == 34 && kind > 33)
                     kind = 33;
                  break;
               case 14:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(32, 35);
                  break;
               case 15:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(26, 28);
                  break;
               case 16:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 17:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(15);
                  break;
               case 18:
                  if (curChar == 10)
                     jjCheckNAddStates(26, 28);
                  break;
               case 19:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 21:
                  if ((0x3ff401000000000L & l) != 0L)
                     jjCheckNAddStates(14, 16);
                  break;
               case 23:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(20, 23);
                  break;
               case 24:
                  if (curChar == 32)
                     jjCheckNAddTwoStates(25, 33);
                  break;
               case 25:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(25, 26);
                  break;
               case 26:
                  if (curChar == 40)
                     jjCheckNAddStates(36, 38);
                  break;
               case 28:
                  if ((0x3ff401000000000L & l) != 0L)
                     jjCheckNAddStates(39, 42);
                  break;
               case 29:
                  if (curChar == 44)
                     jjCheckNAddStates(36, 38);
                  break;
               case 30:
                  if (curChar == 41 && kind > 28)
                     kind = 28;
                  break;
               case 32:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(43, 47);
                  break;
               case 33:
                  if (curChar == 60)
                     jjAddStates(48, 49);
                  break;
               case 34:
                  if (curChar == 62)
                     jjCheckNAdd(26);
                  break;
               case 45:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 30)
                     kind = 30;
                  jjCheckNAdd(45);
                  break;
               case 46:
                  if ((0x3ff401000000000L & l) == 0L)
                     break;
                  if (kind > 31)
                     kind = 31;
                  jjCheckNAddTwoStates(46, 47);
                  break;
               case 48:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 31)
                     kind = 31;
                  jjCheckNAddStates(17, 19);
                  break;
               case 49:
                  if (curChar == 60)
                     jjAddStates(24, 25);
                  break;
               case 51:
                  if ((0x3ff401000000000L & l) != 0L)
                     jjCheckNAddStates(3, 5);
                  break;
               case 53:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(10, 13);
                  break;
               case 54:
                  if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 56:
                  if ((0x3ff401000000000L & l) != 0L)
                     jjCheckNAddStates(50, 52);
                  break;
               case 58:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(53, 56);
                  break;
               case 59:
                  if (curChar == 32)
                     jjCheckNAddTwoStates(60, 69);
                  break;
               case 60:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(60, 61);
                  break;
               case 61:
                  if (curChar == 40)
                     jjCheckNAddStates(57, 59);
                  break;
               case 63:
                  if ((0x3ff401000000000L & l) != 0L)
                     jjCheckNAddStates(60, 63);
                  break;
               case 64:
                  if (curChar == 44)
                     jjCheckNAddStates(57, 59);
                  break;
               case 65:
                  if (curChar == 41)
                     jjstateSet[jjnewStateCnt++] = 66;
                  break;
               case 66:
                  if (curChar == 62 && kind > 29)
                     kind = 29;
                  break;
               case 68:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(64, 68);
                  break;
               case 69:
                  if (curChar == 60)
                     jjAddStates(69, 70);
                  break;
               case 70:
                  if (curChar == 62)
                     jjCheckNAdd(61);
                  break;
               case 81:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 54;
                  break;
               case 83:
                  if ((0x3ff401000000000L & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 85:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(6, 9);
                  break;
               case 86:
                  if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 87;
                  break;
               case 88:
                  if ((0x3ff401000000000L & l) != 0L)
                     jjCheckNAddStates(71, 73);
                  break;
               case 90:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(74, 77);
                  break;
               case 91:
                  if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 92;
                  break;
               case 93:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjAddStates(78, 79);
                  break;
               case 94:
                  if (curChar == 62 && kind > 32)
                     kind = 32;
                  break;
               case 95:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 86;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 99:
                  if ((0x7fffffe2ffffffeL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  if ((0x7fffffe2ffffffeL & l) != 0L)
                     jjCheckNAddStates(3, 5);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(6, 9);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(10, 13);
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddStates(6, 9);
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddStates(10, 13);
                  break;
               case 50:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddStates(3, 5);
                  break;
               case 97:
                  if ((0x7fffffe2ffffffeL & l) != 0L)
                  {
                     if (kind > 31)
                        kind = 31;
                     jjCheckNAddTwoStates(46, 47);
                  }
                  if ((0x7fffffe2ffffffeL & l) != 0L)
                     jjCheckNAddStates(14, 16);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 31)
                        kind = 31;
                     jjCheckNAddStates(17, 19);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 30)
                        kind = 30;
                     jjCheckNAdd(45);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(20, 23);
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 31)
                        kind = 31;
                     jjCheckNAddStates(17, 19);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddStates(20, 23);
                  break;
               case 98:
                  if ((0x7fffffe2ffffffeL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  if ((0x7fffffe2ffffffeL & l) != 0L)
                     jjCheckNAddStates(3, 5);
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddStates(6, 9);
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddStates(10, 13);
                  break;
               case 96:
                  if ((0x7fffffe2ffffffeL & l) != 0L)
                  {
                     if (kind > 31)
                        kind = 31;
                     jjCheckNAddTwoStates(46, 47);
                  }
                  if ((0x7fffffe2ffffffeL & l) != 0L)
                     jjCheckNAddStates(14, 16);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 30)
                        kind = 30;
                     jjCheckNAdd(45);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 31)
                        kind = 31;
                     jjCheckNAddStates(17, 19);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddStates(20, 23);
                  break;
               case 6:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 30)
                     kind = 30;
                  jjCheckNAddStates(80, 85);
                  break;
               case 1:
                  jjCheckNAddTwoStates(1, 2);
                  break;
               case 3:
               case 4:
                  jjCheckNAddTwoStates(4, 2);
                  break;
               case 10:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(26, 28);
                  break;
               case 11:
                  if (curChar == 92)
                     jjAddStates(86, 89);
                  break;
               case 12:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(26, 28);
                  break;
               case 21:
                  if ((0x7fffffe2ffffffeL & l) != 0L)
                     jjCheckNAddStates(14, 16);
                  break;
               case 22:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddStates(20, 23);
                  break;
               case 23:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(20, 23);
                  break;
               case 25:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjAddStates(90, 91);
                  break;
               case 27:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddStates(39, 42);
                  break;
               case 28:
                  if ((0x7fffffe2ffffffeL & l) != 0L)
                     jjCheckNAddStates(39, 42);
                  break;
               case 31:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddStates(43, 47);
                  break;
               case 32:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(43, 47);
                  break;
               case 35:
               case 39:
                  if (curChar == 116)
                     jjCheckNAdd(34);
                  break;
               case 36:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 37:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 38:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 40:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 41:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 42:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 43:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 44:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 45:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 30)
                     kind = 30;
                  jjCheckNAdd(45);
                  break;
               case 46:
                  if ((0x7fffffe2ffffffeL & l) == 0L)
                     break;
                  if (kind > 31)
                     kind = 31;
                  jjCheckNAddTwoStates(46, 47);
                  break;
               case 47:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 31)
                     kind = 31;
                  jjCheckNAddStates(17, 19);
                  break;
               case 48:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 31)
                     kind = 31;
                  jjCheckNAddStates(17, 19);
                  break;
               case 51:
                  if ((0x7fffffe2ffffffeL & l) != 0L)
                     jjCheckNAddStates(3, 5);
                  break;
               case 52:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddStates(10, 13);
                  break;
               case 53:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(10, 13);
                  break;
               case 55:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddStates(50, 52);
                  break;
               case 56:
                  if ((0x7fffffe2ffffffeL & l) != 0L)
                     jjCheckNAddStates(50, 52);
                  break;
               case 57:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddStates(53, 56);
                  break;
               case 58:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(53, 56);
                  break;
               case 60:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjAddStates(92, 93);
                  break;
               case 62:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddStates(60, 63);
                  break;
               case 63:
                  if ((0x7fffffe2ffffffeL & l) != 0L)
                     jjCheckNAddStates(60, 63);
                  break;
               case 67:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddStates(64, 68);
                  break;
               case 68:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(64, 68);
                  break;
               case 71:
               case 75:
                  if (curChar == 116)
                     jjCheckNAdd(70);
                  break;
               case 72:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 71;
                  break;
               case 73:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 72;
                  break;
               case 74:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 73;
                  break;
               case 76:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 75;
                  break;
               case 77:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 76;
                  break;
               case 78:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 77;
                  break;
               case 79:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 78;
                  break;
               case 80:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 79;
                  break;
               case 82:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 83:
                  if ((0x7fffffe2ffffffeL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 84:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddStates(6, 9);
                  break;
               case 85:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(6, 9);
                  break;
               case 87:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddStates(71, 73);
                  break;
               case 88:
                  if ((0x7fffffe2ffffffeL & l) != 0L)
                     jjCheckNAddStates(71, 73);
                  break;
               case 89:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddStates(74, 77);
                  break;
               case 90:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(74, 77);
                  break;
               case 92:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(93, 94);
                  break;
               case 93:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(93, 94);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(1, 2);
                  break;
               case 3:
               case 4:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(4, 2);
                  break;
               case 10:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(26, 28);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 96 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   83, 84, 95, 51, 52, 81, 83, 84, 85, 95, 51, 52, 53, 81, 21, 22,
   24, 46, 47, 48, 21, 22, 23, 24, 50, 82, 10, 11, 13, 2, 3, 5,
   10, 11, 15, 13, 27, 29, 30, 28, 29, 30, 31, 28, 32, 29, 30, 31,
   38, 44, 56, 57, 59, 56, 57, 58, 59, 62, 64, 65, 63, 64, 65, 67,
   63, 68, 64, 65, 67, 74, 80, 88, 89, 91, 88, 89, 90, 91, 93, 94,
   21, 22, 24, 45, 46, 47, 12, 14, 16, 19, 25, 26, 60, 61,
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, "\143\154\141\163\163",
"\155\157\144", "\164\171\160\145", "\141\162\147\165\155\145\156\164", "\143\157\160\171",
"\133", "\135", "\74\151\156\151\164\76", "\74\143\154\151\156\151\164\76",
"\161\165\145\162\171", "\163\165\160\145\162", "\151\156\154\151\156\145",
"\145\170\143\154\165\144\145", "\147\145\156", "\163\157\165\162\143\145",
"\163\164\141\164\151\143\146\151\145\154\144", "\72", "\75", "\160\162\157\160", "\143\157\165\156\164", null, null, null,
null, null, null, null, null, null, "\173", "\175", "\74", "\76", "\73", "\54",
"\50", "\51", };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0xff3ffffff81L,
};
static final long[] jjtoSkip = {
   0x7eL,
};
protected edu.psu.cse.siis.coal.lang.SimpleCharStream input_stream;
private final int[] jjrounds = new int[96];
private final int[] jjstateSet = new int[192];
protected char curChar;
/** Constructor. */
public PropagationParserTokenManager(edu.psu.cse.siis.coal.lang.SimpleCharStream stream){
   if (edu.psu.cse.siis.coal.lang.SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public PropagationParserTokenManager(edu.psu.cse.siis.coal.lang.SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(edu.psu.cse.siis.coal.lang.SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 96; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(edu.psu.cse.siis.coal.lang.SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new edu.psu.cse.siis.coal.lang.TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", edu.psu.cse.siis.coal.lang.TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected edu.psu.cse.siis.coal.lang.Token jjFillToken()
{
   final edu.psu.cse.siis.coal.lang.Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = edu.psu.cse.siis.coal.lang.Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public edu.psu.cse.siis.coal.lang.Token getNextToken()
{
  edu.psu.cse.siis.coal.lang.Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new edu.psu.cse.siis.coal.lang.TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, edu.psu.cse.siis.coal.lang.TokenMgrError.LEXICAL_ERROR);
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
